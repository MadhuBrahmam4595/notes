# RESTORE DB DUMP FILE INTO DATABASE USING COMMAND PROMPT WINDOWS
===================================================================
-> C:\Program Files\PostgreSQL\12\bin>psql -U postgres -d dca_staging -h localhost -p 5434  -f C:\Users\swamy\Desktop\DCA_Files\dca_staging.sql
-> Password for user postgres:

# inserting rows in a table from two different tables
======================================================
=> Syntax: INSERT INTO table1(col1,col2) SELECT tab2.col1, tab3.col1 from table2 tab2, table3 tab3 where tab2.col1=tab3.col1
=> Example: insert into user_roles(userid,roleid)select u.userid,l.roleid from usersapi u, login_users l where u.username=l.username

# FIND DB SIZE SCHEMAWISE
=========================
1. SELECT
  schema_name,
  pg_size_pretty(total_size) AS total_size
FROM (
  SELECT
    nspname AS schema_name,
    SUM(pg_total_relation_size(C.oid)) AS total_size
  FROM
    pg_class C
    JOIN pg_namespace N ON (N.oid = C.relnamespace)
  WHERE
    nspname NOT LIKE 'pg_%'
    AND nspname != 'information_schema'
  GROUP BY
    nspname
) AS sizes
ORDER BY
  total_size DESC;
2. SELECT schema_name, 
       pg_size_pretty(sum(table_size)::bigint),
       (sum(table_size) / pg_database_size(current_database())) * 100
FROM (
  SELECT pg_catalog.pg_namespace.nspname as schema_name,
         pg_relation_size(pg_catalog.pg_class.oid) as table_size
  FROM   pg_catalog.pg_class
     JOIN pg_catalog.pg_namespace ON relnamespace = pg_catalog.pg_namespace.oid
) t
GROUP BY schema_name
ORDER BY schema_name;

#FIND ACTIVE SESSIONS FOR DIFFRENT
===================================
FINDING:
=======
SELECT * FROM pg_stat_activity WHERE datname = 'your_database_name';
TERMINATING:
===========
SELECT pg_terminate_backend(pid)
FROM pg_stat_activity
WHERE pid = 'pid_of_session';

#CHANGE OWNER FOR A PARTICULA TABLE
====================================
ALTER TABLE table_name OWNER TO new_owner;

#replace column data
=====================
UPDATE my_table SET my_column = TRIM(BOTH ' ' FROM my_column);
UPDATE my_table SET my_column = REPLACE(my_column, ' ', '');


#CREATING TRIGGERS FOR ARCHIVE TABLES
=====================================
STEP 1: CREATE ARCHIVE TABLE
-------
CREATE TABLE IF NOT EXISTS public.student_application_archive(
	operation character varying(255) COLLATE pg_catalog."default" NOT NULL,
	operaion_ts timestamp(6) without time zone,
  old table columns)

STEP 2: CREATE TRIGGER FUNCTION
-------
CREATE OR REPLACE FUNCTION public.student_application_archive_process()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    VOLATILE
    COST 100
AS $BODY$
BEGIN	
	if(TG_OP='UPDATE') THEN			
		Insert into public.student_application_archive values('Update',now(),OLD.*);				
	elseif(TG_OP='DELETE') THEN	
		Insert into public.student_application_archive values('Delete',now(),OLD.*);	
	else	
	RAISE EXCEPTION 'archive fired but not working ';				
	END IF;
	RETURN NULL;
END;
$BODY$;

STEP 3: CREATE FUNCTION
-------
CREATE TRIGGER archive_student_application_trigger
    AFTER DELETE OR UPDATE 
    ON public.student_application
    FOR EACH ROW 
    EXECUTE FUNCTION public.student_application_archive_process();

#VERTICAL AND HORIZONTAL TOTAL BY QUERY
======================================
SELECT 
    COALESCE(passyear, 'Total') AS passyear,
    SUM(CASE WHEN ptype='Job' THEN 1 ELSE 0 END) AS job,
    SUM(CASE WHEN ptype='OJ' THEN 1 ELSE 0 END) AS oj,
    SUM(CASE WHEN ptype='Apprenticeship' THEN 1 ELSE 0 END) AS apprenticeship,
    SUM(CASE WHEN ptype='OA' THEN 1 ELSE 0 END) AS oa,
    SUM(CASE WHEN ptype='HigherEducation' THEN 1 ELSE 0 END) AS higherEducation,
    SUM(CASE WHEN ptype='SelfEmployment' THEN 1 ELSE 0 END) AS selfEmployment,
    COUNT(*) AS total_count
FROM 
    placements.placements
WHERE 
    passyear != ''
GROUP BY 
    ROLLUP(passyear)
ORDER BY 
    passyear;

